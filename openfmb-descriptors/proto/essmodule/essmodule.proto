syntax = "proto3";

// OpenFMB Operational Model (61850-CIM) (v2.2.1)-OES.eapx
// Thursday, May 30, 2024 9:14:03 PM UTC

package essmodule;
option go_package = "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/essmodule";
option java_package = "openfmb.essmodule";
option java_multiple_files = true;
option csharp_namespace = "openfmb.essmodule";

import "uml.proto";
import "google/protobuf/wrappers.proto";
import "commonmodule/commonmodule.proto";

// MISSING DOCUMENTATION!!!
message ESSCapabilityConfiguration
{
    // UML inherited base object
    commonmodule.SourceCapabilityConfiguration sourceCapabilityConfiguration = 1 [(uml.option_parent_message) = true];
    // Apparent Power Charge Maximum
    commonmodule.ASG VAChaRteMax = 2;
    // Apparent Power Discharge Maximum
    commonmodule.ASG VADisChaRteMax = 3;
    // Active Power Charge Maximum
    commonmodule.ASG WChaRteMax = 4;
    // Active Power Discharge Maximum
    commonmodule.ASG WDisChaRteMax = 5;
}

// Generation capability
message ESSCapabilityOverride
{
    // UML inherited base object
    commonmodule.NameplateValue nameplateValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ESSCapabilityConfiguration essCapabilityConfiguration = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// ESS control profile
message ESSCapabilityOverrideProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ESS ess = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ESSCapabilityOverride essCapabilityOverride = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// MISSING DOCUMENTATION!!!
message ESSCapabilityRatings
{
    // UML inherited base object
    commonmodule.SourceCapabilityRatings sourceCapabilityRatings = 1 [(uml.option_parent_message) = true];
    // Apparent Power Charge Maximum Rating
    commonmodule.ASG VAChaRteMaxRtg = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Apparent Power Discharge Maximum Rating
    commonmodule.ASG VADisChaRteMaxRtg = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Active Power Charge Maximum Rating
    commonmodule.ASG WChaRteMaxRtg = 4 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Active Power Discharge Maximum Rating
    commonmodule.ASG WDisChaRteMaxRtg = 5 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Energy rating of the DER storage.
    commonmodule.ASG WHRtg = 6 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Generation capability
message ESSCapability
{
    // UML inherited base object
    commonmodule.NameplateValue nameplateValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ESSCapabilityRatings essCapabilityRatings = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ESSCapabilityConfiguration essCapabilityConfiguration = 3;
}

// ESS control profile
message ESSCapabilityProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ESS ess = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ESSCapability essCapability = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// ESS inverter high level functions.
message ESSFunction
{
    // ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
    commonmodule.CapacityFirming capacityFirming = 1;
    // ESS inverter high level function to maintain frequency within dead bands.
    commonmodule.FrequencyRegulation frequencyRegulation = 2;
    // ESS inverter high level function to maintain power level by charging or discharging
    commonmodule.PeakShaving peakShaving = 3;
    // ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
    commonmodule.SocLimit socLimit = 4;
    // ESS inverter high level function to maintain SOC within dead bands
    commonmodule.SOCManagement socManagement = 5;
    // ESS inverter high level function to maintain voltage within droop dead bands.
    commonmodule.VoltageDroop voltageDroop = 6;
    // ESS inverter high level function to maintain voltage within dead bands.
    commonmodule.VoltagePI voltagePI = 7;
}

// Point definition (Point)
message ESSPoint
{
    reserved 2,5,6,8,9,12,14,15;
    // Black start enable
    commonmodule.ControlSPC blackStartEnabled = 1;
    // ESS function parameter
    ESSFunction function = 3;
    // Grid connect mode
    commonmodule.ENG_GridConnectModeKind mode = 4;
    // Ramp rates
    commonmodule.RampRate rampRates = 7;
    // Reset device
    commonmodule.ControlSPC reset = 10;
    // ESS state
    commonmodule.Optional_StateKind state = 11;
    // Transition to island on grid loss enable
    commonmodule.ControlSPC transToIslndOnGridLossEnabled = 13;
    // MISSING DOCUMENTATION!!!
    commonmodule.EnterServiceAPC enterServiceOperation = 16;
    // MISSING DOCUMENTATION!!!
    commonmodule.HzWAPC hzWOperation = 17;
    // MISSING DOCUMENTATION!!!
    commonmodule.LimitWAPC limitWOperation = 18;
    // MISSING DOCUMENTATION!!!
    commonmodule.PFSPC pFOperation = 19;
    // MISSING DOCUMENTATION!!!
    commonmodule.TmHzCSG tmHzTripOperation = 20;
    // MISSING DOCUMENTATION!!!
    commonmodule.TmVoltCSG tmVoltTripOperation = 21;
    // MISSING DOCUMENTATION!!!
    commonmodule.VarSPC vArOperation = 22;
    // MISSING DOCUMENTATION!!!
    commonmodule.VoltVarCSG voltVarOperation = 23;
    // MISSING DOCUMENTATION!!!
    commonmodule.VoltWCSG voltWOperation = 24;
    // MISSING DOCUMENTATION!!!
    commonmodule.WVarCSG wVarOperation = 25;
    // MISSING DOCUMENTATION!!!
    commonmodule.WSPC wOperation = 26;
}

// Curve shape setting (FC=SP) (CSG_SP)
message ESSCurvePoint
{
    // The array with the points specifying a curve shape.
    ESSPoint control = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // Start time
    commonmodule.ControlTimestamp startTime = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Curve shape setting (FC=SP) (CSG_SP)
message ESSCSG
{
    // The array with the points specifying a curve shape.
    repeated ESSCurvePoint crvPts = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
message ESSControlScheduleFSCH
{
    // Discrete value in ESSCSG type
    ESSCSG ValDCSG = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
message EssControlFSCC
{
    // UML inherited base object
    commonmodule.ControlFSCC controlFSCC = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ESSControlScheduleFSCH essControlScheduleFSCH = 2;
}

// ESS control class
message ESSControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    EssControlFSCC essControlFSCC = 3;
}

// ESS control profile
message ESSControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ESS ess = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ESSControl essControl = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for cap bank discrete control:
message ESSDiscreteControlDBAT
{
    // UML inherited base object
    commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ESSPoint control = 2;
}

// Cap bank discrete control
message ESSDiscreteControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    ESSDiscreteControlDBAT essDiscreteControlDBAT = 3;
}

// Cap bank discrete control profile.  Instructs an end device (or an end device group) to perform
// a specified action.
message ESSDiscreteControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ESS ess = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ESSDiscreteControl essDiscreteControl = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Specialized 61850 ZBAT class  LN: Battery   Name: ZBAT
message EssEventZBAT
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // If true, the battery is in overcharge (voltage or current) condition.
    commonmodule.StatusSPS BatHi = 2;
    // If true, the battery voltage or charge has dropped below a pre-set level.
    commonmodule.StatusSPS BatLo = 3;
    // MISSING DOCUMENTATION!!!
    commonmodule.StatusSPS BatSt = 4;
    // State of charge (in percentage)
    commonmodule.MV Soc = 5;
    // If stVal TRUE, the device is in standby.
    commonmodule.StatusSPS Stdby = 6;
    // State of health of the DER storage.
    commonmodule.MV SoH = 7;
    // Energy available of the DER storage (WHAvail = WHRtg * SoC * SoH)
    commonmodule.MV WHAvail = 8;
}

// Point definition (Point)
message ESSPointStatus
{
    // Black start enable
    commonmodule.StatusSPS blackStartEnabled = 1;
    // Enable frequency set point
    commonmodule.StatusSPS frequencySetPointEnabled = 2;
    // ESS function parameter
    ESSFunction function = 3;
    // Grid connect mode
    commonmodule.ENG_GridConnectModeKind mode = 4;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue pctHzDroop = 5;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue pctVDroop = 6;
    // Ramp rates
    commonmodule.RampRate rampRates = 7;
    // Enable reactive power set point
    commonmodule.StatusSPS reactivePwrSetPointEnabled = 8;
    // Enable real power set point
    commonmodule.StatusSPS realPwrSetPointEnabled = 9;
    // ESS state
    commonmodule.Optional_StateKind state = 10;
    // Synchronize back to grid
    commonmodule.StatusSPS syncBackToGrid = 11;
    // Transition to island on grid loss enable
    commonmodule.StatusSPS transToIslndOnGridLossEnabled = 12;
    // Enable voltage set point
    commonmodule.StatusSPS voltageSetPointEnabled = 13;
    // MISSING DOCUMENTATION!!!
    commonmodule.EnterServiceAPC enterServiceOperation = 14;
    // MISSING DOCUMENTATION!!!
    commonmodule.HzWAPC hzWOperation = 15;
    // MISSING DOCUMENTATION!!!
    commonmodule.LimitWAPC limitWOperation = 16;
    // MISSING DOCUMENTATION!!!
    commonmodule.PFSPC pFOperation = 17;
    // MISSING DOCUMENTATION!!!
    commonmodule.TmHzCSG tmHzTripOperation = 18;
    // MISSING DOCUMENTATION!!!
    commonmodule.TmVoltCSG tmVoltTripOperation = 19;
    // MISSING DOCUMENTATION!!!
    commonmodule.VarSPC vArOperation = 20;
    // MISSING DOCUMENTATION!!!
    commonmodule.VoltVarCSG voltVarOperation = 21;
    // MISSING DOCUMENTATION!!!
    commonmodule.VoltWCSG voltWOperation = 22;
    // MISSING DOCUMENTATION!!!
    commonmodule.WVarCSG wVarOperation = 23;
}

// Specialized 61850 ZGEN class
message ESSEventAndStatusZGEN
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // DC Power On/Off Status; True = DC power on
    commonmodule.StatusSPS AuxPwrSt = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ENS_DynamicTestKind DynamicTest = 3;
    // Emergency stop
    commonmodule.StatusSPS EmgStop = 4;
    // Generator is synchronized to EPS, or not; True = Synchronized
    commonmodule.StatusSPS GnSynSt = 5;
    // Point status
    ESSPointStatus PointStatus = 6;
}

// Specialized 61850 ZGEN class for ESS event profile
message ESSEventZGEN
{
    // UML inherited base object
    ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(uml.option_parent_message) = true];
}

// ESS event
message ESSEvent
{
    // UML inherited base object
    commonmodule.EventValue eventValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    EssEventZBAT essEventZBAT = 2;
    // MISSING DOCUMENTATION!!!
    ESSEventZGEN essEventZGEN = 3;
}

// ESS event profile
message ESSEventProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.EventMessageInfo eventMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ESS ess = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ESSEvent essEvent = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// ESS reading value
message ESSReading
{
    // UML inherited base object
    commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseMMTN phaseMMTN = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMTR readingMMTR = 3;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU readingMMXU = 4;
}

// ESS reading profile
message ESSReadingProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ESS ess = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ESSReading essReading = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Specialized 61850 ZBAT
message EssStatusZBAT
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // Battery system status &ndash; True: on
    commonmodule.StatusSPS BatSt = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ENG_GridConnectModeKind GriMod = 3;
    // State of charge (in percentage)
    commonmodule.MV Soc = 4;
    // MISSING DOCUMENTATION!!!
    commonmodule.StatusSPS Stdby = 5;
    // State of health of the DER storage.
    commonmodule.MV SoH = 6;
    // Energy available of the DER storage (WHAvail = WHRtg * SoC * SoH)
    commonmodule.MV WHAvail = 7;
}

// Specialized 61850 ZGEN class
message ESSStatusZGEN
{
    // UML inherited base object
    ESSEventAndStatusZGEN eSSEventAndStatusZGEN = 1 [(uml.option_parent_message) = true];
}

// ESS status
message ESSStatus
{
    // UML inherited base object
    commonmodule.StatusValue statusValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    EssStatusZBAT essStatusZBAT = 2;
    // MISSING DOCUMENTATION!!!
    ESSStatusZGEN essStatusZGEN = 3;
}

// ESS status profile
message ESSStatusProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.StatusMessageInfo statusMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ESS ess = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    ESSStatus essStatus = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

