syntax = "proto3";

// OpenFMB Operational Model (61850-CIM) (v2.0.1) .eap
// Tuesday, December 7, 2021 5:56:45 PM UTC

package solarmodule;
option go_package = "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/solarmodule";
option java_package = "openfmb.solarmodule";
option java_multiple_files = true;
option csharp_namespace = "openfmb.solarmodule";

import "uml.proto";
import "google/protobuf/wrappers.proto";
import "commonmodule/commonmodule.proto";

// MISSING DOCUMENTATION!!!
message SolarInverter
{
    // UML inherited base object
    commonmodule.ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
}

// MISSING DOCUMENTATION!!!
message SolarCapabilityConfiguration
{
    // UML inherited base object
    commonmodule.SourceCapabilityConfiguration sourceCapabilityConfiguration = 1 [(uml.option_parent_message) = true];
}

// Generation capability
message SolarCapabilityOverride
{
    // UML inherited base object
    commonmodule.IdentifiedObject identifiedObject = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarCapabilityConfiguration solarCapabilityConfiguration = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Generation capability profile
message SolarCapabilityOverrideProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.CapabilityOverrideMessageInfo capabilityOverrideMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarCapabilityOverride solarCapabilityOverride = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SolarInverter solarInverter = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// MISSING DOCUMENTATION!!!
message SolarCapabilityRatings
{
    // UML inherited base object
    commonmodule.SourceCapabilityRatings sourceCapabilityRatings = 1 [(uml.option_parent_message) = true];
}

// Generation capability
message SolarCapability
{
    // UML inherited base object
    commonmodule.NameplateValue nameplateValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarCapabilityConfiguration solarCapabilityConfiguration = 2;
    // MISSING DOCUMENTATION!!!
    SolarCapabilityRatings solarCapabilityRatings = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Generation capability profile
message SolarCapabilityProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.CapabilityMessageInfo capabilityMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarCapability solarCapability = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SolarInverter solarInverter = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Point definition (Point)
message SolarPoint
{
    // Enable frequency set point
    commonmodule.ControlSPC frequencySetPointEnabled = 1;
    // Grid connect mode
    commonmodule.ENG_GridConnectModeKind mode = 2;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue pctHzDroop = 3;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue pctVDroop = 4;
    // Ramp rates
    commonmodule.RampRate rampRates = 5;
    // Enable reactive power set point
    commonmodule.ControlSPC reactivePwrSetPointEnabled = 6;
    // Enable real power set point
    commonmodule.ControlSPC realPwrSetPointEnabled = 7;
    // Reset device
    commonmodule.ControlSPC reset = 8;
    // MISSING DOCUMENTATION!!!
    commonmodule.Optional_StateKind state = 9;
    // MISSING DOCUMENTATION!!!
    commonmodule.ControlSPC voltageSetPointEnabled = 10;
    // X-axis value (Unix time).
    commonmodule.ControlTimestamp startTime = 11 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    commonmodule.EnterServiceAPC enterServiceOperation = 12;
    // MISSING DOCUMENTATION!!!
    commonmodule.HzWAPC hzWOperation = 13;
    // MISSING DOCUMENTATION!!!
    commonmodule.LimitWAPC limitWOperation = 14;
    // MISSING DOCUMENTATION!!!
    commonmodule.PFSPC pFOperation = 15;
    // MISSING DOCUMENTATION!!!
    commonmodule.TmHzCSG tmHzTripOperation = 16;
    // MISSING DOCUMENTATION!!!
    commonmodule.TmVoltCSG tmVoltTripOperation = 17;
    // MISSING DOCUMENTATION!!!
    commonmodule.VarSPC vArOperation = 18;
    // MISSING DOCUMENTATION!!!
    commonmodule.VoltVarCSG voltVarOperation = 19;
    // MISSING DOCUMENTATION!!!
    commonmodule.VoltWCSG voltWOperation = 20;
    // MISSING DOCUMENTATION!!!
    commonmodule.WVarCSG wVarOperation = 21;
    // Black start enable
    commonmodule.ControlSPC blackStartEnabled = 22;
    // MISSING DOCUMENTATION!!!
    commonmodule.ControlSPC syncBackToGrid = 23;
}

// Curve shape setting (FC=SP) (CSG_SP)
message SolarCSG
{
    // The array with the points specifying a curve shape.
    repeated SolarPoint crvPts = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
message SolarControlScheduleFSCH
{
    // Discrete value in SolarCSG type
    SolarCSG ValDCSG = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
message SolarControlFSCC
{
    // UML inherited base object
    commonmodule.ControlFSCC controlFSCC = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarControlScheduleFSCH SolarControlScheduleFSCH = 2;
}

// Solar control
message SolarControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    SolarControlFSCC solarControlFSCC = 3;
}

// Solar control profile
message SolarControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarControl solarControl = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SolarInverter solarInverter = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Point definition (Point)
message SolarPointStatus
{
    // Enable frequency set point
    commonmodule.StatusSPS frequencySetPointEnabled = 1;
    // Grid connect mode
    commonmodule.ENG_GridConnectModeKind mode = 2;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue pctHzDroop = 3;
    // MISSING DOCUMENTATION!!!
    google.protobuf.FloatValue pctVDroop = 4;
    // Ramp rates
    commonmodule.RampRate rampRates = 5;
    // Enable reactive power set point
    commonmodule.StatusSPS reactivePwrSetPointEnabled = 6;
    // Enable real power set point
    commonmodule.StatusSPS realPwrSetPointEnabled = 7;
    // MISSING DOCUMENTATION!!!
    commonmodule.Optional_StateKind state = 8;
    // Enable voltage set point
    commonmodule.StatusSPS voltageSetPointEnabled = 9;
    // MISSING DOCUMENTATION!!!
    commonmodule.ControlSPC blackStartEnabled = 10;
    // MISSING DOCUMENTATION!!!
    commonmodule.EnterServiceAPC enterServiceOperation = 11;
    // MISSING DOCUMENTATION!!!
    commonmodule.HzWPoint hzWOperation = 12;
    // MISSING DOCUMENTATION!!!
    commonmodule.LimitWAPC limitWOperation = 13;
    // MISSING DOCUMENTATION!!!
    commonmodule.PFSPC pFOperation = 14;
    // MISSING DOCUMENTATION!!!
    commonmodule.ControlSPC syncBackToGrid = 15;
    // MISSING DOCUMENTATION!!!
    commonmodule.TmHzCSG tmHzTripOperation = 16;
    // MISSING DOCUMENTATION!!!
    commonmodule.TmVoltCSG tmVoltTripOperation = 17;
    // MISSING DOCUMENTATION!!!
    commonmodule.VarSPC vArOperation = 18;
    // MISSING DOCUMENTATION!!!
    commonmodule.VoltVarCSG voltVarOperation = 19;
    // MISSING DOCUMENTATION!!!
    commonmodule.VoltWCSG voltWOperation = 20;
    // MISSING DOCUMENTATION!!!
    commonmodule.WVarCSG wVarOperation = 21;
}

// Specialized 61850 ZGEN class
message SolarEventAndStatusZGEN
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // DC Power On/Off Status; True = DC power on
    commonmodule.StatusSPS AuxPwrSt = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ENS_DynamicTestKind DynamicTest = 3;
    // Emergency stop
    commonmodule.StatusSPS EmgStop = 4;
    // MISSING DOCUMENTATION!!!
    SolarPointStatus PointStatus = 5;
    // DC Power On/Off Status; True = DC power on
    commonmodule.Optional_AlrmKind Alrm = 6;
    // Emergency stop
    commonmodule.StatusSPS GnSynSt = 7;
    // DC Power On/Off Status; True = DC power on
    commonmodule.Optional_GridConnectionStateKind GridConnectionState = 8;
    // DC Power On/Off Status; True = DC power on
    google.protobuf.StringValue ManAlrmInfo = 9;
    // MISSING DOCUMENTATION!!!
    commonmodule.Optional_OperatingStateKind OperatingState = 10;
}

// Specialized 61850 ZGEN class
message SolarEventZGEN
{
    // UML inherited base object
    SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ENG_GridConnectModeKind GriMod = 2;
}

// Solar event
message SolarEvent
{
    // UML inherited base object
    commonmodule.EventValue eventValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarEventZGEN solarEventZGEN = 2;
}

// Solar event profile
message SolarEventProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.EventMessageInfo eventMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarEvent solarEvent = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SolarInverter solarInverter = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Solar reading value
message SolarReading
{
    // UML inherited base object
    commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseMMTN phaseMMTN = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMTR readingMMTR = 3;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU readingMMXU = 4;
}

// Solar reading profile
message SolarReadingProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarInverter solarInverter = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SolarReading solarReading = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Specialized 61850 ZGEN LN class
message SolarStatusZGEN
{
    // UML inherited base object
    SolarEventAndStatusZGEN solarEventAndStatusZGEN = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ENG_GridConnectModeKind GriMod = 2;
}

// Solar status
message SolarStatus
{
    // UML inherited base object
    commonmodule.StatusValue statusValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarStatusZGEN solarStatusZGEN = 2;
}

// Solar status profile
message SolarStatusProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.StatusMessageInfo statusMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SolarInverter solarInverter = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SolarStatus solarStatus = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

