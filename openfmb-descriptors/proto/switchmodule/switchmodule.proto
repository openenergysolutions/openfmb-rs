syntax = "proto3";

// OpenFMB Operational Model (61850-CIM) (v2.0.1) .eap
// Tuesday, December 7, 2021 5:56:45 PM UTC

package switchmodule;
option go_package = "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/switchmodule";
option java_package = "openfmb.switchmodule";
option java_multiple_files = true;
option csharp_namespace = "openfmb.switchmodule";

import "uml.proto";
import "commonmodule/commonmodule.proto";

// OpenFMB specialization for switch control:  LN: Circuit switch   Name: XSWI
message SwitchDiscreteControlXSWI
{
    // UML inherited base object
    commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseDPC Pos = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ControlSPC ResetProtectionPickup = 3;
}

// Switch discrete control
message SwitchDiscreteControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    SwitchDiscreteControlXSWI switchDiscreteControlXSWI = 3;
}

// A ProtectedSwitch is a switching device that can be operated by ProtectionEquipment.
message ProtectedSwitch
{
    // UML inherited base object
    commonmodule.ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
}

// Switch control profile
message SwitchDiscreteControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ProtectedSwitch protectedSwitch = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SwitchDiscreteControl switchDiscreteControl = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for SwitchEventProfile
message SwitchEventXSWI
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // Dynamic test status
    commonmodule.ENS_DynamicTestKind DynamicTest = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseDPS Pos = 3;
}

// Switch event
message SwitchEvent
{
    // UML inherited base object
    commonmodule.EventValue eventValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SwitchEventXSWI switchEventXSWI = 2;
}

// Switch event profile
message SwitchEventProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.EventMessageInfo eventMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ProtectedSwitch protectedSwitch = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SwitchEvent switchEvent = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Switch reading value
message SwitchReading
{
    // UML inherited base object
    commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU diffReadingMMXU = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseMMTN phaseMMTN = 3;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMTR readingMMTR = 4;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU readingMMXU = 5;
}

// Switch reading profile
message SwitchReadingProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ProtectedSwitch protectedSwitch = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    repeated SwitchReading switchReading = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1, (uml.option_multiplicity_max) = 2];
}

// OpenFMB specialization for SwitchStatusProfile
message SwitchStatusXSWI
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ENS_DynamicTestKind DynamicTest = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseDPS Pos = 4;
    // Fault latch: LT01=51A OR 51B OR 51C
    commonmodule.PhaseSPS ProtectionPickup = 5 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Switch status
message SwitchStatus
{
    // UML inherited base object
    commonmodule.StatusValue statusValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    SwitchStatusXSWI switchStatusXSWI = 2;
}

// Switch status profile
message SwitchStatusProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.StatusMessageInfo statusMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    ProtectedSwitch protectedSwitch = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    SwitchStatus switchStatus = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

