syntax = "proto3";

// OpenFMB Operational Model (61850-CIM) (v2.0.1) .eap
// Tuesday, December 7, 2021 5:56:45 PM UTC

package regulatormodule;
option go_package = "gitlab.com/openfmb/psm/ops/protobuf/go-openfmb-ops-protobuf/v2/openfmb/regulatormodule";
option java_package = "openfmb.regulatormodule";
option java_multiple_files = true;
option csharp_namespace = "openfmb.regulatormodule";

import "uml.proto";
import "commonmodule/commonmodule.proto";

// LN: Automatic tap changer controller   Name: ATCC
message DirectionalATCC
{
    // Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
    // of the nominal voltage (forward power flow presumed).
    commonmodule.PhaseAPC BndWid = 1;
    // Time to wait before operating, after reaching the control point (forward power flow presumed).
    commonmodule.PhaseISC CtlDlTmms = 2;
    // Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
    commonmodule.PhaseAPC LDCR = 3;
    // Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
    commonmodule.PhaseAPC LDCX = 4;
    // (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
    commonmodule.PhaseAPC VolSpt = 5;
    // Enable voltage set point
    commonmodule.PhaseDPC voltageSetPointEnabled = 6;
}

// LN: Automatic tap changer controller   Name: ATCC
message RegulatorControlATCC
{
    // UML inherited base object
    commonmodule.LogicalNodeForControl logicalNodeForControl = 1 [(uml.option_parent_message) = true];
    // Forward voltage regulation
    DirectionalATCC DirFwd = 2;
    // The control characteristics for power flow operation
    commonmodule.Optional_DirectionModeKind DirMode = 3;
    // Reverse voltage regulation
    DirectionalATCC DirRev = 4;
    // This is the percentage used to determine the current threshold at which the control recognizes
    // current flow direction. Below the threshold, the current flow is considered to be indeterminate.
    commonmodule.PhaseAPC DirThd = 5;
    // (controllable) If true, transformers operate in parallel, otherwise they operate independently.
    commonmodule.PhaseSPC ParOp = 6;
    // Ramp rates
    commonmodule.RampRate rampRates = 7;
    // (controllable) Tap position change to the specified value.
    commonmodule.Optional_StateKind state = 8;
    // If true, tap position shall be lowered.
    commonmodule.PhaseSPC TapOpL = 9;
    // If true, tap position shall be raised.
    commonmodule.PhaseSPC TapOpR = 10;
    // High voltage limit for Voltage Limiter
    commonmodule.PhaseAPC VolLmtHi = 11;
    // Low voltage limit for Voltage Limiter
    commonmodule.PhaseAPC VolLmtLo = 12;
    // Voltage-limiting types
    commonmodule.Optional_VoltLimitModeKind VolLmtMode = 13;
}

// Point definition (Point)
message RegulatorPoint
{
    // Regulator control
    RegulatorControlATCC control = 1;
    // Start time
    commonmodule.Timestamp startTime = 8 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Curve shape setting (FC=SP) (CSG_SP)
message RegulatorCSG
{
    // The array with the points specifying a curve shape.
    repeated RegulatorPoint crvPts = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
message RegulatorControlScheduleFSCH
{
    // Discrete value in RegulatorCSG type
    RegulatorCSG ValDCSG = 1 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Using 61850 FSCC for regulator control
message RegulatorControlFSCC
{
    // UML inherited base object
    commonmodule.ControlFSCC controlFSCC = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorControlScheduleFSCH regulatorControlScheduleFSCH = 2;
}

// Regulator control
message RegulatorControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    RegulatorControlFSCC regulatorControlFSCC = 3;
}

// Pole-mounted fault interrupter with built-in phase and ground relays, current transformer (CT),
// and supplemental controls.
message RegulatorSystem
{
    // UML inherited base object
    commonmodule.ConductingEquipment conductingEquipment = 1 [(uml.option_parent_message) = true];
}

// Regulator control profile.  Instructs an end device (or an end device group) to perform a
// specified action.
message RegulatorControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorControl regulatorControl = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Regulator control
message RegulatorDiscreteControl
{
    // UML inherited base object
    commonmodule.ControlValue controlValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.CheckConditions check = 2;
    // MISSING DOCUMENTATION!!!
    RegulatorControlATCC regulatorControlATCC = 3;
}

// Regulator control profile.  Instructs an end device (or an end device group) to perform a
// specified action.
message RegulatorDiscreteControlProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ControlMessageInfo controlMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorDiscreteControl regulatorDiscreteControl = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// LN: Automatic tap changer controller   Name: ATCC
message RegulatorEventAndStatusATCC
{
    // Centre of voltage control bandwidth (forward power flow presumed).
    commonmodule.ASG BndCtr = 1;
    // Control (secondary) voltage bandwidth (i.e., range), given either as voltage value or percentage
    // of the nominal voltage (forward power flow presumed).
    commonmodule.ASG BndWid = 2;
    // Compensated Voltage Secondary compared with set point plus or minus Bandwidth
    commonmodule.PhaseSPS BndWidHi = 3;
    // Compensated Voltage Secondary compared with set point plus or minus Bandwidth
    commonmodule.PhaseSPS BndWidLo = 4;
    // Current Power Direction is the direction that regulator is regulating.
    commonmodule.PhaseSPS DirCtlRev = 5;
    // True if direction is indeterminate.
    commonmodule.PhaseSPS DirIndt = 6;
    // True if the current direction is the same as the System Direction
    commonmodule.PhaseSPS DirRev = 7;
    // Line drop voltage due to line resistance component (forward power flow presumed) at rated current.
    commonmodule.ASG LDCR = 8;
    // Line drop voltage due to line reactance component (forward power flow presumed) at rated current.
    commonmodule.ASG LDCX = 9;
    // (controllable) If true, transformers operate in parallel, otherwise they operate independently.
    commonmodule.StatusSPS ParOp = 10;
    // Ramp rates
    commonmodule.RampRate rampRates = 11;
    // State
    commonmodule.Optional_StateKind state = 12;
    // OpenFMB extension:  Status for the time to wait before operating (CtrlDlTmms)
    commonmodule.StatusINC StDlTmms = 13;
    // If true, there was an error in tap position change, or in tap indication (for instance, wrong
    // Binary Coded Decimal (BCD) code).
    commonmodule.StatusSPS TapOpErr = 14;
    // (controllable) Tap position change to the specified value.
    commonmodule.PhaseINS TapPos = 15;
    // Load Voltage Secondary compared with VolLmtHi
    commonmodule.PhaseSPS VolLmtHi = 16;
    // Load Voltage Secondary compared with VolLmtLo
    commonmodule.PhaseSPS VolLmtLo = 17;
    // (controllable) Voltage setpoint. Analog value (MX) feeds back the setpoint of the controller.
    commonmodule.PhaseAPC VolSpt = 18;
    // Voltage set point status
    commonmodule.StatusSPS voltageSetPointEnabled = 19;
}

// OpenFMB 61850 specialization for both RegulatorEventProfile and RegulatorStatusProfile
message RegulatorEventAndStatusANCR
{
    // UML inherited base object
    commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.ENS_DynamicTestKind DynamicTest = 2;
    // MISSING DOCUMENTATION!!!
    RegulatorEventAndStatusATCC PointStatus = 3;
}

// Regulator event
message RegulatorEvent
{
    // UML inherited base object
    commonmodule.EventValue eventValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;
}

// Regulator event profile
message RegulatorEventProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.EventMessageInfo eventMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorEvent regulatorEvent = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Regulator reading value
message RegulatorReading
{
    // UML inherited base object
    commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    commonmodule.PhaseMMTN phaseMMTN = 2;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMTR readingMMTR = 3;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU readingMMXU = 4;
    // MISSING DOCUMENTATION!!!
    commonmodule.ReadingMMXU secondaryReadingMMXU = 5;
}

// Regulator reading profile
message RegulatorReadingProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.ReadingMessageInfo readingMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    repeated RegulatorReading regulatorReading = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1, (uml.option_multiplicity_max) = 2];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

// Regulator status
message RegulatorStatus
{
    // UML inherited base object
    commonmodule.StatusValue statusValue = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorEventAndStatusANCR regulatorEventAndStatusANCR = 2;
}

// Regulator status profile
message RegulatorStatusProfile
{
    option (uml.option_openfmb_profile) = true;
    // UML inherited base object
    commonmodule.StatusMessageInfo statusMessageInfo = 1 [(uml.option_parent_message) = true];
    // MISSING DOCUMENTATION!!!
    RegulatorStatus regulatorStatus = 2 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
    // MISSING DOCUMENTATION!!!
    RegulatorSystem regulatorSystem = 3 [(uml.option_required_field) = true, (uml.option_multiplicity_min) = 1];
}

